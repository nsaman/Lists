AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''

Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
      Role: !Ref CodeDeployRole

Resources:
  LambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CodeStar-${ProjectId}-Execution${Stage}'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary'
      Policies:
        - PolicyName: LambdaExecutionRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow #allow to write logs to cloudwatch
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - dynamodb:BatchGet
                  - dynamodb:DescribeTable
                  - dynamodb:Get*
                  - dynamodb:ListStreams
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchWrite*
                  - dynamodb:Delete*
                  - dynamodb:Update*
                  - dynamodb:PutItem
                  - es:ESHttpGet
                Resource: "*"

  LambdaDDBStreamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow #allow lambda to assume this role
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaDDBStreamRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow #allow to write logs to cloudwatch
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow #allow lambda to read from the event stream
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: "*"
              - Effect: Allow #elasticsearch
                Action:
                  - es:ESHttpPost
                Resource: "*"

  CreateElaticIndexesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow #allow lambda to assume this role
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CreateElaticIndexesRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow #allow to write logs to cloudwatch
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow #allow lambda to read from the event stream
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: "*"
              - Effect: Allow #elasticsearch
                Action:
                  - es:*
                Resource: "*"

  ListsElasticsearchDomain:
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: "lists"
      ElasticsearchClusterConfig:
        InstanceCount: "1"
        InstanceType: "t2.small.elasticsearch"
      EBSOptions:
        EBSEnabled: true
        Iops: 0
        VolumeSize: 10
        VolumeType: "gp2"
      SnapshotOptions:
        AutomatedSnapshotStartHour: "0"
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: "true"
      ElasticsearchVersion: "7.7"

  ThingDDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "thingId"
          AttributeType: "N"
        - AttributeName: "changeTimestamp"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "thingId"
          KeyType: "HASH"
        - AttributeName: "changeTimestamp"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "thing"
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  DynamoThingStreamHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'DynamoThingStreamHandler-${ProjectId}'
      Handler: com.lists.handler.DynamoThingStreamHandlerWrapper
      Runtime: java11
      Role:
        Fn::GetAtt:
          - LambdaDDBStreamRole
          - Arn
      Environment:
        Variables:
          elasticEndpoint: !GetAtt ListsElasticsearchDomain.DomainEndpoint
      Timeout: 60
      MemorySize: 256

  CreateThingHandlerWrapper:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'CreateThingHandler-${ProjectId}'
      Handler: com.lists.handler.CreateThingHandlerWrapper
      Runtime: java11
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Timeout: 60
      MemorySize: 256

  SearchThingHandlerWrapper:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'SearchThingHandler-${ProjectId}'
      Handler: com.lists.handler.SearchThingHandlerWrapper
      Runtime: java11
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Timeout: 60
      MemorySize: 256

  CreateElaticIndexesHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'CreateElaticIndexesHandler-${ProjectId}'
      Handler: com.lists.handler.CreateElaticIndexesHandlerWrapper
      Runtime: java11
      Role:
        Fn::GetAtt:
          - CreateElaticIndexesRole
          - Arn
      Environment:
        Variables:
          elasticEndpoint: !GetAtt ListsElasticsearchDomain.DomainEndpoint
      Timeout: 60
      MemorySize: 256

  EventMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt ThingDDB.StreamArn
      FunctionName: !GetAtt DynamoThingStreamHandler.Arn
      StartingPosition: "TRIM_HORIZON"